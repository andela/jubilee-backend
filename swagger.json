{
    "swagger": "2.0",
    "info": {
        "version": "1.0",
        "title": "Barefoot Nomad",
        "description": "Barefoot Nomad - Making company travel and accomodation easy and convenient."
    },
    "servers": [{
            "url": "http://localhost:3000/"
        },
        {
            "url": "https://jubilee-backend-staging.herokuapp.com/"
        }
    ],
    "host": "",
    "basePath": "/api",
    "securityDefinitions": {
        "Bearer": {
            "description": "Standard Authorization header using the bearer scheme. Example: \"bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [{
            "name": "Auth",
            "description": "Endpoint for Authentication"
        },
        {
            "name": "Users",
            "description": "Endpoint for Users"
        },
        {
            "name": "Facility",
            "description": "Endpoint for CRUD operations involving Facilities"
        }
    ],
    "paths": {
        "/auth/signup/user": {
            "post": {
                "description": "Registers a User",
                "summary": "Creates a new user on the system",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "required": true,
                    "description": "This is the request body object containing user information",
                    "schema": {
                        "$ref": "#/requestBody/userSignupRequest"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Account created successfully"
                    },
                    "400": {
                        "description": "Please fill in the fields"
                    },
                    "409": {
                        "description": "User with email already exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/signup/supplier": {
            "post": {
                "description": "Registers a Suppler",
                "summary": "Creates a new supplier company and add the admin user to the database",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "required": true,
                    "description": "This is the request body object containing supplier information",
                    "schema": {
                        "$ref": "#/requestBody/supplierSignupRequest"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Supplier created successfully"
                    },
                    "400": {
                        "description": "Please fill in the fields"
                    },
                    "409": {
                        "description": "User with email already exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/verify": {
            "get": {
                "description": "The endpoint verifies a new user's verification link and marks the user account as verified if successful",
                "summary": "Marks User account as verified",
                "tags": [
                    "Auth"
                ],
                "parameters": [{
                    "name": "token",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    },
                    "example": "eyJhbGciOiJIUzI1NiJ9.Mg.hbsvkNj_kZvQYNtZxa4r2GXoNRLq1q4xC9qSq48Dwhw"
                }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "400": {
                        "description": "Invalid Token/User does not exist",
                        "content": {
                            "application/json; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Account verification success"
                    }
                }
            }
        },
        "/auth/signup/company": {
            "post": {
                "description": "Registers a Company",
                "summary": "Creates a new company on the system",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "required": true,
                    "description": "This is the request body object containing a company signup information",
                    "schema": {
                        "$ref": "#/requestBody/companySignUpRequest"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Account created successfully"
                    },
                    "400": {
                        "description": "Please fill in the fields"
                    },
                    "409": {
                        "description": "User with email already exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "User should be logged in",
                "summary": "Logs in an existing user",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "required": true,
                    "description": "This is the request body object containing user login information",
                    "schema": {
                        "$ref": "#/requestBody/loginRequest"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Login successful"
                    },
                    "401": {
                        "description": "Invalid login details"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/facebook": {
            "get": {
                "description": [
                    "Login a facebook user and fetch the user profile"
                ],
                "summary": "#",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "401": {
                        "description": "You need to signup to use this feature"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "description": [
                    "Login a google user and fetch the user profile"
                ],
                "summary": "#",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "401": {
                        "description": "You need to signup to use this feature"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/profile/{userId}": {
            "get": {
                "description": "Populates user details on the profile. `Token is required`",
                "summary": "Gets a single user profile",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [{
                    "Bearer": []
                }],
                "parameters": [{
                    "in": "path",
                    "name": "userId",
                    "required": true,
                    "description": "The Id of the user"
                }],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "404": {
                        "description": "User Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/profile/{userId}/": {
            "put": {
                "description": "Updates a single user profile. `Token is required`",
                "summary": "User can update the profile details",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [{
                    "Bearer": []
                }],
                "parameters": [{
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "description": "The Id of the user to be updated"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "This is the request body object containing user update",
                        "schema": {
                            "$ref": "#/requestBody/updateUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "404": {
                        "description": "User Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "schema": {
                        "$ref": "#/requestBody/updateUserProfileRequest"
                    }
                }
            }
        },
        "/users/requests": {
            "get": {
                "description": "Get all requests for a particular user",
                "summary": "User can get their request history",
                "tags": [
                    "Users",
                    "Requests"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Access denied"
                    },
                    "404": {
                        "description": "You have not made any request yet"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/requests/user/{status}": {
            "get": {
                "description": "Gets users requests by specifying status parameter. `Token is required`",
                "summary": "Gets all requests of such status",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [{
                    "Bearer": []
                }],
                "parameters": [{
                    "in": "path",
                    "name": "status",
                    "required": true,
                    "description": "The status of the requests"
                }],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Access denied, Token required"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/requests/{requestId}": {
            "patch": {
                "description": "Updates a single request by assigned manager. `Token of Manager/Admins is required`",
                "summary": "Manager can update the request status",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [{
                    "Bearer": []
                }],
                "parameters": [{
                        "in": "path",
                        "name": "requestId",
                        "required": true,
                        "description": "The Id of the request to be updated"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "This is the request body object containing request update",
                        "schema": {
                            "$ref": "#/requestBody/updateRequestStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "You are an authorized user"
                    },
                    "400": {
                        "description": "Request can only be pending, approved, rejected"
                    },
                    "404": {
                        "description": " Not such request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "schema": {
                        "$ref": "#/requestBody/updateRequestStatus"
                    }
                }
            }
        },
        "/users/role": {
            "patch": {
                "description": "Updates User Role",
                "summary": "Allows admin to Update User Role",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [{
                    "Bearer": []
                }],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "required": true,
                    "description": "This is the request body object containing user role update",
                    "schema": {
                        "$ref": "#/requestBody/updateUserRoleRequest"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authentication required"
                    },
                    "404": {
                        "description": "User Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Send a password reset email to the user",
                "summary": "User can reset password",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [{
                    "in": "body",
                    "name": "email",
                    "required": true,
                    "description": "The user email for password reset",
                    "schema": {
                        "$ref": "#/requestBody/resetPasswordRequest"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Check your email for password reset link"
                    },
                    "400": {
                        "description": "Email is required || Email must be valid"
                    },
                    "404": {
                        "description": "User with email does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/facility/supplier": {
            "post": {
                "description": "Supplier - Create new facility",
                "summary": "Enables a supplier to create a new facility record",
                "tags": [
                    "Facility"
                ],
                "produces": [
                    "application/json"
                ],
                 "security": {
                    "Bearer": []
                },
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "required": true,
                    "description": "The facility object",
                    "schema": {
                        "$ref": "#/requestBody/facility"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/facility/company": {
            "post": {
                "description": "creates a new facility for a specific company",
                "summary": "Enables a company's Travel Admin to create a new facility",
                "tags": [
                    "Facility"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [
                    {
                      "in": "body",
                      "name": "body",
                      "required": true,
                      "description": "This is the request body object containing a the details of the facility created",
                      "schema": {
                        "$ref": "#/requestBody/companyFacilityCreationRequest"
                      }
                    }
                  ],
                "responses": {
                    "201": {
                        "description": "Successfully created new facility"
                    },
                    "400": {
                      "description": "Invalid input parameters"
                    },
                    "401": {
                        "description": "Unautheticated Request (You are not logged in)"
                    },
                    "403": {
                        "description": "Unauthorized Request (You don't have the require permission)"
                    },
                    "500": {
                        "description":"Internal Server Error"
                    }
                }
            }
        },
        "/booking/accommodation": {
            "post": {
                "description": "Endpoint for booking accommodations",
                "summary": "Enables a user book an accommodation in a suppliers' facility",
                "tags": [
                    "Booking"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                      "in": "body",
                      "name": "booking",
                      "required": true,
                      "description": "The booking object",
                      "schema": {
                        "$ref": "#/requestBody/accommodationBooking"
                      }
                    }
                  ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/requestBody/accBookingSuccess"
                          }
                    },
                    "400": {
                      "description": "Client error",
                      "schema": {
                        "$ref": "#/requestBody/400"
                      }
                    },
                    "401": {
                        "description": "Client error",
                        "schema": {
                          "$ref": "#/requestBody/401"
                        }
                      },
                      "404": {
                        "description": "Client error",
                        "schema": {
                          "$ref": "#/requestBody/404"
                        }
                      },
                      "500": {
                        "description": "Server error",
                        "schema": {
                          "$ref": "#/requestBody/500"
                        }
                      }
                }
            }
        }
    },
    "requestBody": {
        "userSignupRequest": {
            "title": "User Signup Request",
            "type": "object",
            "properties": {
                "firstName": {
                    "description": "First name of the user",
                    "type": "string"
                },
                "lastName": {
                    "description": "Last name of the user",
                    "type": "string"
                },
                "email": {
                    "description": "Email of the user",
                    "type": "string"
                },
                "password": {
                    "description": "The Password of the user",
                    "type": "string"
                },
                "birthdate": {
                    "description": "The date of birth of user",
                    "type": "date"
                },
                "companyName": {
                    "description": "The user's company name",
                    "type": "string"
                },
                "preferredCurrency": {
                    "description": "The user's currency preference",
                    "type": "string"
                },
                "street": {
                    "description": "The user's street address",
                    "type": "string"
                },
                "city": {
                    "description": "The user's city address",
                    "type": "string"
                },
                "state": {
                    "description": "The user's state address",
                    "type": "string"
                },
                "country": {
                    "description": "The user's country address",
                    "type": "string"
                },
                "zip": {
                    "description": "The user's zip code",
                    "type": "string"
                },
                "phoneNumber": {
                    "description": "The user's phone number",
                    "type": "string"
                },
                "role": {
                    "description": "The user's role",
                    "type": "string"
                },
                "department": {
                    "description": "The user's department",
                    "type": "string"
                }

            },
            "example": {
                "firstName": "King",
                "lastName": "David",
                "email": "barefootnomad@gmail.com",
                "country": "Nigeria",
                "companyName": "Andela",
                "password": "Elija455h",
                "gender": "male",
                "street": "20, Board Street",
                "city": "ikeja",
                "state": "Lagos",
                "birthdate": "2010-01-01",
                "phoneNumber": "08063345598"
            },
            "required": [
                "firstName, lastName, email, password"
            ]
        },
        "supplierSignupRequest": {
            "title": "User Signup Request",
            "type": "object",
            "properties": {
                "firstName": {
                    "description": "First name of the Admin",
                    "type": "string"
                },
                "lastName": {
                    "description": "Last name of the Admin",
                    "type": "string"
                },
                "email": {
                    "description": "Email of the Admin",
                    "type": "string"
                },
                "password": {
                    "description": "The Password of the Admin",
                    "type": "string"
                },
                "companyAddress": {
                    "description": "The supplier's company address",
                    "type": "string"
                },
                "companyName": {
                    "description": "The supplier's company name",
                    "type": "string"
                },
                "categoryOfServiceId": {
                    "description": "The supplier's category of service",
                    "type": "integer"
                },
                "phoneNumber": {
                    "description": "The Admin's phone number",
                    "type": "string"
                }
            },
            "example": {
                "firstName": "King",
                "lastName": "David",
                "email": "barefootnomad@gmail.com",
                "companyName": "Andela",
                "companyAddress": "No 1, clinton str, Lagos, Nigeria",
                "categoryOfServiceId": 2,
                "password": "Elija455h",
                "phoneNumber": "08063345598"
            },
            "required": [
                "firstName, lastName, email, companyName, companyAddress, categoryOfService, password"
            ]
        },
        "companySignUpRequest": {
            "title": "Company Signup Request",
            "type": "object",
            "properties": {
                "firstName": {
                    "description": "first name of the Company Admin",
                    "type": "string"
                },
                "lastName": {
                    "description": "Last name of the Company Admin",
                    "type": "string"
                },
                "email": {
                    "description": "Email of the user",
                    "type": "string"
                },
                "password": {
                    "description": "The Password of the user",
                    "type": "string"
                },
                "companyName": {
                    "description": "The user's company name",
                    "type": "string"
                },
                "companyAddress": {
                    "description": "The company's Address",
                    "type": "string"
                },
                "companySizeId": {
                    "description": "The company's Size, between 1-101 and Above,a id reference is passed to the server",
                    "type": "integer"
                },
                "companyPlanId": {
                    "description": "The plan to subscribe, gold,silver or platinum ,a id reference is passed to the server",
                    "type": "integer"
                }
            },
            "companyFacilityCreationRequest": {
                "title": "New company facility creation Request",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of Facility",
                        "type": "string"
                    },
                    "description": {
                        "description": "A simple description of the facility",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state where the facility is located",
                        "type": "string"
                    },
                    "city": {
                        "description": "The city where the facility is located",
                        "type": "string"
                    },
                    "address": {
                        "description": "An address excluding state and city where the facility is located",
                        "type": "string"
                    },
                    "rooms": {
                        "description": "A collection of room types available in the facility, Checkout the example for clarity",
                        "type": "array"
                    },
                    "amenities": {
                        "description": "A collection of amenities available in the facility. Usually provided as a list of checkbox. Refer to the example for clarity on value type",
                        "type": "array"
                    },
                    "addOns": {
                        "description": "A collection of extra/add-on services available in the facility. Usually provided as a list of checkbox. Refer to the example for clarity on value type",
                        "type": "array"
                    },
                    "imageUrl": {
                        "description": "A link to a picture of the facility",
                        "type": "string"
                    }
                },
                "example": {
                    "amenities": [
                        1,5,5,6,7,8
                        ],
                    "rooms": [{
                        "occupancyCount": 2,
                        "roomCategoryId": 1,
                        "description": "A room for a single dude",
                        "roomCount": 3
                    },
                    {
                        "occupancyCount": 3,
                        "roomCategoryId": 2,
                        "description": "A room for two dudes",
                        "roomCount": 3
                    }],
                    "description": "A nice place to stay for all your ever",
                    "addOns":["parking lot", "free-wifi"],
                    "state": "Ondo",
                    "city": "Akure",
                    "address": "30, Ojumu Crescent",
                    "name": "Bliss World",
                    "imageUrl": "http://www.google.com"
                }
                ,
                "required": [
                    "name, state, city,address,description,imageUrl,rooms,amenities,addOns"
                ]
            },
            "loginRequest": {
                "title": "Login Request",
                "type": "object",
                "properties": {
                    "email": {
                        "description": "Email address of the user",
                        "type": "string"
                    },
                    "password": {
                        "description": "The Password of the user",
                        "type": "string"
                    }
                },
                "lastName": {
                    "description": "Last name of the user",
                    "type": "string"
                },
                "email": {
                    "description": "Email of the user",
                    "type": "string"
                },
                "gender": {
                    "description": "Use gender",
                    "type": "integer"
                },
                "department": {
                    "description": "User department",
                    "type": "string"
                },
                "lineManager": {
                    "description": "User line manager",
                    "type": "string"
                },
                "street": {
                    "description": "User street",
                    "type": "string"
                },
                "preferredLanguage": {
                    "description": "User preferred language",
                    "type": "string"
                },
                "preferredCurrency": {
                    "description": "User preferred currency",
                    "type": "string"
                }
            },
            "example": {
                "firstName": "first name",
                "lastName": "last name",
                "email": "newemail@example.com",
                "gender": "male",
                "department": "",
                "lineManager": "",
                "street": "street",
                "preferredLanguage": "EN",
                "preferredCurrency": "Naira"
            }
        },
        "updateUserRoleRequest": {
            "title": "Update User Role",
            "type": "object",
            "properties": {
                "email": {
                    "description": "the email of the user",
                    "type": "string"
                },
                "roleId": {
                    "description": "Id of role for the user",
                    "type": "number"
                }
            },
            "example": {
                "email": "barefootnomad@gmail.com",
                "roleId": 5
            }
        },
        "resetPasswordRequest": {
            "title": "Password Reset Request",
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address of the user user",
                    "type": "string"
                }
            },
            "facility": {
                "title": "Company Signup Request",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Facility name",
                        "type": "string"
                    },
                    "city": {
                        "description": "City in which Facility is located",
                        "type": "string"
                    },
                    "state": {
                        "description": "State in which Facility is located",
                        "type": "string"
                    },
                    "address": {
                        "description": "Facility address",
                        "type": "string"
                    },
                    "imageUrl": {
                        "description": "Facility Image Url",
                        "type": "string"
                    },
                    "description": {
                        "description": "Facility description",
                        "type": "string"
                    },
                    "rooms": {
                        "description": "an array of available rooms on the facility",
                        "type": "array"
                    },
                    "amenities": {
                        "description": "An array of the ids of amenities on the facility",
                        "type": "array"
                    },
                    "addOns": {
                        "description": "An array of add on service offered by the facility management",
                        "type": "array"
                    }
                },
                "example": {
                    "name": "Sheraton Hotels",
                    "state": "Lagos",
                    "city": "Ajah",
                    "address": "123, St. Micheal str Ajah, Lagos state",
                    "imageUrl": "https://cloudinary/sheraton-lagos",
                    "description": "Hotels and suite",
                    "rooms": [{
                            "roomCount": 3,
                            "roomCategoryId": 4,
                            "occupancyCount": 2,
                            "roomCost": 5000
                        },
                        {
                            "roomCount": 2,
                            "roomCategoryId": 2,
                            "occupancyCount": 1,
                            "roomCost": 15000
                        }
                    ],
                    "amenities": [1, 2, 3, 4],
                    "addOns": ["wifi", "coffee shop"]
                }
              },
              "accommodationBooking": {
                "title": "Accommodation Booking",
                "type": "object",
                "properties": {
                    "checkIn": {
                        "description": "The date user wants to check-in",
                        "type": "date"
                    },
                    "checkOut": {
                        "description": "The date user wants to check-out",
                        "type": "date"
                    },
                    "roomId": {
                        "description": "The id of the room user wants to book",
                        "type": "integer"
                    },
                    "userId": {
                        "description": "The id of the user that wants to book accommodation",
                        "type": "integer"
                    }
                },
                "example": {
                    "checkIn": "2019-09-20",
                    "checkOut": "2019-09-21",
                    "roomId": 1,
                    "userId": 1
                }
              },
              "accBookingSuccess": {
                  "properties": {
                      "status": {
                          "description": "Success message returned after a successful booking",
                          "type": "string"
                      },
                      "data": {
                          "description": "A booking object returned by the server",
                          "type": "object"
                      }
                  },
                  "example": {
                    "status": "success",
                    "data": {
                        "id": 1,
                        "checkIn": "2019-09-20",
                        "checkOut": "2019-09-21",
                        "roomId": 1,
                        "userId": 1,
                        "updatedAt": "2019-09-09T14:22:21.170Z",
                        "createdAt": "2019-09-09T14:22:21.170Z"
                    }
                }
              },
              "400": {
                "properties": {
                    "status": {
                        "description": "Client error",
                        "type":"string"
                    },
                    "error": {
                        "description": "A descriptive error message",
                        "type": "object"
                    }
                },
                "example": {
                    "status": "fail",
                    "error": {
                        "message": "There was a validation error"
                    }
                }
            },
            "401": {
                "properties": {
                    "status": {
                        "description": "Authentication error",
                        "type":"string"
                    },
                    "error": {
                        "description": "A descriptive error message",
                        "type": "object"
                    }
                },
                "example": {
                    "status": "fail",
                    "error": {
                        "message": "Token is required"
                    }
                }
            },
            "404": {
                "properties": {
                    "status": {
                        "description": "Authentication error",
                        "type":"string"
                    },
                    "error": {
                        "description": "A descriptive error message",
                        "type": "object"
                    }
                },
                "example": {
                    "status": "fail",
                    "error": {
                        "message": "Data supplied by the user was not found"
                    }
                }
            },
            "500": {
                "properties": {
                    "status": {
                        "description": "Server error",
                        "type":"string"
                    },
                    "error": {
                        "description": "A descriptive error message",
                        "type": "object"
                    }
                },
                "example": {
                    "status": "fail",
                    "error": {
                        "message": "A server error prevented your request from being processed"
                    }
                }
            }
        },
        "updateRequestStatus": {
            "title": "Update Request Status",
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status to be updated",
                    "type": "string"
                }
            },
            "example": {
                "status": 1
            }
        }
    }
}